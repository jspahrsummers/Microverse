//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: guest_os_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `GuestOSServiceClient`, then call methods of this protocol to make API calls.
internal protocol GuestOSServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GuestOSServiceClientInterceptorFactoryProtocol? { get }

  func paste(
    _ request: PasteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PasteRequest, PasteResponse>
}

extension GuestOSServiceClientProtocol {
  internal var serviceName: String {
    return "GuestOSService"
  }

  /// Unary call to Paste
  ///
  /// - Parameters:
  ///   - request: Request to send to Paste.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paste(
    _ request: PasteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PasteRequest, PasteResponse> {
    return self.makeUnaryCall(
      path: "/GuestOSService/Paste",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePasteInterceptors() ?? []
    )
  }
}

internal protocol GuestOSServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'paste'.
  func makePasteInterceptors() -> [ClientInterceptor<PasteRequest, PasteResponse>]
}

internal final class GuestOSServiceClient: GuestOSServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GuestOSServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the GuestOSService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GuestOSServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol GuestOSServiceProvider: CallHandlerProvider {
  var interceptors: GuestOSServiceServerInterceptorFactoryProtocol? { get }

  func paste(request: PasteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<PasteResponse>
}

extension GuestOSServiceProvider {
  internal var serviceName: Substring { return "GuestOSService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Paste":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<PasteRequest>(),
        responseSerializer: ProtobufSerializer<PasteResponse>(),
        interceptors: self.interceptors?.makePasteInterceptors() ?? [],
        userFunction: self.paste(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol GuestOSServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'paste'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePasteInterceptors() -> [ServerInterceptor<PasteRequest, PasteResponse>]
}
